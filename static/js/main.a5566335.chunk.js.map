{"version":3,"sources":["components/imageSearch.js","components/imageCard.js","App.js","serviceWorker.js","index.js"],"names":["ImageSearch","searchText","useState","text","setText","className","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","ImageCard","card","src","alt","id","employee_name","employee_salary","employee_age","split","map","char","index","key","App","users","setUsers","filteredUsers","setFilteredusers","isLoading","setIsLoading","term","setTerm","useEffect","console","log","filterIt","fetch","then","res","json","data","catch","err","arr","searchKey","length","filter","obj","joinedStr","Object","values","toString","fuzzy_match","str","pattern","reduce","a","b","RegExp","test","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kMAgCeA,EA9BK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,KAQtC,OACE,yBAAKC,UAAU,kDACb,0BAAMC,SAPO,SAACC,GAChBA,EAAEC,iBACFP,EAAWE,IAKiBE,UAAU,mBAClC,yBAAKA,UAAU,8DACb,2BACEI,SAAU,SAACF,GAAD,OAAOH,EAAQG,EAAEG,OAAOC,QAClCN,UAAU,kHACVO,KAAK,OACLC,YAAY,yBAEd,4BACER,UAAU,kIACVO,KAAK,UAFP,cCwBKE,EA1CG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEnB,OACE,yBAAKV,UAAU,qCACb,yBACEW,IAAI,kDACJC,IAAG,iBAAYF,EAAKG,IACpBb,UAAU,WAEZ,yBAAKA,UAAU,aACb,yBAAKA,UAAU,0CAAf,mBACeU,EAAKI,gBAEpB,4BACE,4BACE,4BAAQd,UAAU,cAAlB,YACCU,EAAKK,iBAER,4BACE,4BAAQf,UAAU,cAAlB,SACCU,EAAKM,cAER,4BACE,4BAAQhB,UAAU,cAAlB,QACCU,EAAKG,MAIZ,yBAAKb,UAAU,aACZU,EAAKI,cAAcG,MAAM,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACjC,0BACEC,IAAKD,EACLpB,UAAU,4FAETmB,SCqBEG,MApDf,WAAgB,IAAD,EACazB,mBAAS,IADtB,mBACN0B,EADM,KACCC,EADD,OAE6B3B,mBAAS,IAFtC,mBAEN4B,EAFM,KAESC,EAFT,OAGqB7B,oBAAS,GAH9B,mBAGN8B,EAHM,KAGKC,EAHL,OAIW/B,mBAAS,IAJpB,mBAINgC,EAJM,KAIAC,EAJA,KAMbC,qBAAU,WACRC,QAAQC,IAAIC,EAASX,EAAOM,IAC5BH,EAAiBQ,EAASX,EAAOM,IACjCM,MAAM,oDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLb,EAASa,EAAIE,MACbX,GAAa,MAEdY,OAAM,SAACC,GAAD,OAAST,QAAQC,IAAIQ,QAC7B,CAACZ,IAEJ,IAAMK,EAAW,SAACQ,EAAKC,GACrB,OAAIA,EAAUC,QAAU,EAAU,GAC3BF,EAAIG,QAAO,SAACC,GACjB,IAAIC,EAAYC,OAAOC,OAAOH,GAAKI,WACnC,GAAIC,EAAYJ,EAAWJ,GAAY,OAAO,MAI5CQ,EAAc,SAACC,EAAIC,GAEvB,OADAA,EAAUA,EAAQpC,MAAM,IAAIqC,QAAO,SAASC,EAAEC,GAAI,OAAOD,EAAE,KAAKC,KACxD,IAAIC,OAAOJ,EAAQ,KAAMK,KAAKN,IAGxC,OACE,yBAAKpD,UAAU,0CACb,kBAAC,EAAD,CAAaJ,WAAY,SAACE,GAAD,OAAUgC,EAAQhC,MAC1C6B,EACC,uCAEA,yBAAK3B,UAAU,0DACX6B,EAAKe,OAAS,EACdnB,EAAcP,KAAI,SAACyC,EAAMvC,GAAP,OAChB,kBAAC,EAAD,CAAWC,IAAKsC,EAAK9C,GAAIH,KAAMiD,OAEjCpC,EAAML,KAAI,SAACyC,EAAMvC,GAAP,OACR,kBAAC,EAAD,CAAWC,IAAKsC,EAAK9C,GAAIH,KAAMiD,UCpCzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.a5566335.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst ImageSearch = ({ searchText }) => {\n  const [text, setText] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    searchText(text);\n  };\n\n  return (\n    <div className=\"max-w-sm rounded overflow-hidden my-10 mx-auto\">\n      <form onSubmit={onSubmit} className=\"w-full max-w-sm\">\n        <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\n          <input\n            onChange={(e) => setText(e.target.value)}\n            className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n            type=\"text\"\n            placeholder=\"Search Image Term...\"\n          />\n          <button\n            className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\"\n            type=\"submit\"\n          >\n            Search\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ImageSearch;\n","import React from 'react';\n\nconst ImageCard = ({ card }) => {\n\n  return (\n    <div className=\"rounded overflow-hidden shadow-lg\">\n      <img\n        src=\"https://source.unsplash.com/user/erondu/800x600\"\n        alt={`erondu-${card.id}`}\n        className=\"w-full\"\n      />\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-purple-500 text-xl mb-2\">\n          {`Photo by ${card.employee_name}`}\n        </div>\n        <ul>\n          <li>\n            <strong className=\"capitalize\">salary: </strong>\n            {card.employee_salary}\n          </li>\n          <li>\n            <strong className=\"capitalize\">age: </strong>\n            {card.employee_age}\n          </li>\n          <li>\n            <strong className=\"capitalize\">id: </strong>\n            {card.id}\n          </li>\n        </ul>\n      </div>\n      <div className=\"px-6 py-4\">\n        {card.employee_name.split(\" \").map((char, index) => (\n          <span\n            key={index}\n            className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\"\n          >\n            {char}\n          </span>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default ImageCard;","import React, { useState, useEffect } from \"react\";\nimport ImageSearch from './components/imageSearch';\nimport ImageCard from './components/imageCard';\n\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [filteredUsers, setFilteredusers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [term, setTerm] = useState(\"\");\n\n  useEffect(() => {\n    console.log(filterIt(users, term));\n    setFilteredusers(filterIt(users, term));\n    fetch(`http://dummy.restapiexample.com/api/v1/employees`)\n      .then((res) => res.json())\n      .then((res) => {\n        setUsers(res.data);\n        setIsLoading(false);\n      })\n      .catch((err) => console.log(err));\n  }, [term]);\n\n  const filterIt = (arr, searchKey) =>  {\n    if (searchKey.length <= 0) return [];\n    return arr.filter((obj) => {\n      let joinedStr = Object.values(obj).toString();\n      if (fuzzy_match(joinedStr, searchKey)) return true;\n    });\n  }\n\n  const fuzzy_match = (str,pattern) => {\n    pattern = pattern.split(\"\").reduce(function(a,b){ return a+\".*\"+b; });\n    return (new RegExp(pattern,\"i\")).test(str);\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-screen-xl px-4\">\n      <ImageSearch searchText={(text) => setTerm(text)} />\n      {isLoading ? (\n        <h1>loading</h1>\n      ) : (\n        <div className=\"grid gap-4 grid-cols-1  md:grid-cols-2 xl:grid-cols-3 \">\n          { term.length > 0 ?\n            filteredUsers.map((user, index) => (\n              <ImageCard key={user.id} card={user} />\n            )) :\n            users.map((user, index) => (\n              <ImageCard key={user.id} card={user} />\n            ))\n          }\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}